# S3 or MinIO connection parameters
backend.cloud.storage.system = s3
s3.amazon.endpoint = s3.amazonaws.com
s3.default.region = eu-central-1
s3.default.bucket = smacc
s3.credentials.access.key = AAAAAAAAAAAAAAAAAAAA
s3.credentials.secret.key = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

# SNS notification parameters
sns.notification.activate = false
sns.notification.hostname.or.endpoint = https://35bb-46-251-115-185.eu.ngrok.io
sns.local.port = 8000
sns.topic.name = SMACC_S3_EVENTS
sns.notification.pool.size = 4

# S3 parameters
s3.upload.max.createRequests = 4
s3.upload.parallelUpload.local.max = 2
s3.upload.parallelUpload.global.max = 4
s3.upload.con.connectionTimeout.ms = 3000
s3.upload.con.socketTimeout.ms = 3000
s3.memory.byteBufferSize.byte = 20000
s3.upload.max.upload.retry.times = 4
s3.upload.max.upload.retry.delay.ms = 40000
server.to.s3.buffer.size = 1048576
server.client.handle.threadpool.size = 20

# Cache parameters
cache.recovery.activate = false
cache.memory.capacity = 1000000
cache.memory.byteBufferSize.byte = 1024
cache.memory.state = cache/MemState/
cache.disk.volumes.size = 2
cache.disk.volume.0 = cache/DiskData1, cache/DiskState1, 1000000000
cache.disk.volume.1 = cache/DiskData2, cache/DiskState2, 1000000000
cache.parallel.asyncupload.threadpool.size = 4
cache.parallel.asyncupload.buffer.byte = 20000
cache.parallel.uploadhandler.threadpool.size = 4

# Admission policy
# Alternatives:
# - edu.cut.smacc.server.cache.policy.admission.AdmissionAlways
# - edu.cut.smacc.server.cache.policy.admission.AdmissionEXD
admission.policy.class = edu.cut.smacc.server.cache.policy.admission.AdmissionAlways

# Admission location
# Alternatives:
# - MEMORYDISK
# - DISKONLY
# - MEMORYONLY
admission.location.tiers.on.put = MEMORYONLY
admission.location.tiers.on.get = MEMORYONLY

# Disk selection policy
# Alternatives:
# - edu.cut.smacc.server.cache.policy.disk.selection.DiskSelectionRoundRobin
# - edu.cut.smacc.server.cache.policy.disk.selection.DiskSelectionLowerUsage
disk.selection.policy = edu.cut.smacc.server.cache.policy.selection.DiskSelectionRoundRobin

# Eviction policy to trigger eviction
eviction.trigger.policy = edu.cut.smacc.server.cache.policy.eviction.trigger.ThresholdPercentageTrigger
# Cache Eviction Threshold Percentage - evictions will start when it is met
eviction.trigger.policy.threshold = 85

# Eviction policy to select item to evict
# Alternatives:
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemLRU
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemMRU
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemFIFO
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemLFU
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemLRFU
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemEXD
# - edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemLIFE
eviction.item.policy = edu.cut.smacc.server.cache.policy.eviction.item.EvictionItemLRU

# Eviction policy to decide whether to delete or downgrate an evicted item
eviction.placement.policy = edu.cut.smacc.server.cache.policy.eviction.placement.DeleteOrDowngrade
eviction.placement.downgrade.on.evict = false

# Statistics output invoke policy
# Alternatives:
# - edu.cut.smacc.server.statistics.output.StatisticsOutputClientBased
# - edu.cut.smacc.server.statistics.output.StatisticsOutputOperationCountBased
# - edu.cut.smacc.server.statistics.output.StatisticsOutputTimeBased
statistics.output.invoke.policy = edu.cut.smacc.server.statistics.output.StatisticsOutputClientBased

# The metric for the statistics output invoke policy
# For StatisticsOutputOperationCountBased it acts like the operation count: every X operations output statistics
# For StatisticsOutputTimeBased it acts like the time: every X seconds output statistics
statistics.output.invoke.policy.metric = 1

# Window based aging for LIFE policy
eviction.policy.window.based.aging.hours = 3
